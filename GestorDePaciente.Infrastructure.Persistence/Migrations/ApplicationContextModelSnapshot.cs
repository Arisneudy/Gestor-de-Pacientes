// <auto-generated />
using System;
using GestorDePaciente.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestorDePaciente.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Lab.LabTests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdDoctorOffice")
                        .HasColumnType("int");

                    b.Property<int>("IdPatient")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("IdDoctorOffice");

                    b.HasIndex("IdPatient");

                    b.ToTable("LabTests", (string)null);
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Lab.ResultLabTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdLabTest")
                        .HasColumnType("int");

                    b.Property<int>("IdPatient")
                        .HasColumnType("int");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdLabTest");

                    b.HasIndex("IdPatient");

                    b.ToTable("ResultLabTests", (string)null);
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Login.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorOfficeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorOfficeId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Office.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorOfficeId")
                        .HasColumnType("int");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int");

                    b.Property<int>("IdPatient")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorOfficeId");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdPatient");

                    b.ToTable("Appointments", (string)null);
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Office.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdDoctorOffice")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlProfilePicture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.HasIndex("IdDoctorOffice");

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Office.DoctorOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DoctorOffices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Calle 1",
                            DateCreated = new DateTime(2024, 6, 14, 23, 23, 49, 356, DateTimeKind.Local).AddTicks(865),
                            Name = "Consultorio 1"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Calle 2",
                            DateCreated = new DateTime(2024, 6, 14, 23, 23, 49, 356, DateTimeKind.Local).AddTicks(868),
                            Name = "Consultorio 2"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Calle 3",
                            DateCreated = new DateTime(2024, 6, 14, 23, 23, 49, 356, DateTimeKind.Local).AddTicks(869),
                            Name = "Consultorio 3"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Calle 4",
                            DateCreated = new DateTime(2024, 6, 14, 23, 23, 49, 356, DateTimeKind.Local).AddTicks(870),
                            Name = "Consultorio 4"
                        });
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Office.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasAllergies")
                        .HasColumnType("bit");

                    b.Property<int>("IdDoctorOffice")
                        .HasColumnType("int");

                    b.Property<bool>("IsSmoker")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlProfilePicture")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("");

                    b.HasKey("Id");

                    b.HasIndex("IdDoctorOffice");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Role.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2024, 6, 14, 23, 23, 49, 356, DateTimeKind.Local).AddTicks(697),
                            Name = "Administrador"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2024, 6, 14, 23, 23, 49, 356, DateTimeKind.Local).AddTicks(710),
                            Name = "Asistente"
                        });
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Lab.LabTests", b =>
                {
                    b.HasOne("GestorDePaciente.Core.Domain.Entities.Office.Appointment", null)
                        .WithMany("LabTests")
                        .HasForeignKey("AppointmentId");

                    b.HasOne("GestorDePaciente.Core.Domain.Entities.Office.DoctorOffice", "DoctorOffice")
                        .WithMany("LabTests")
                        .HasForeignKey("IdDoctorOffice")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GestorDePaciente.Core.Domain.Entities.Office.Patient", "Patient")
                        .WithMany("LabTests")
                        .HasForeignKey("IdPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorOffice");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Lab.ResultLabTest", b =>
                {
                    b.HasOne("GestorDePaciente.Core.Domain.Entities.Lab.LabTests", "LabTest")
                        .WithMany("ResultLabTests")
                        .HasForeignKey("IdLabTest")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestorDePaciente.Core.Domain.Entities.Office.Patient", "Patient")
                        .WithMany("ResultLabTests")
                        .HasForeignKey("IdPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LabTest");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Login.User", b =>
                {
                    b.HasOne("GestorDePaciente.Core.Domain.Entities.Office.DoctorOffice", "DoctorOffice")
                        .WithMany("Users")
                        .HasForeignKey("DoctorOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestorDePaciente.Core.Domain.Entities.Role.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorOffice");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Office.Appointment", b =>
                {
                    b.HasOne("GestorDePaciente.Core.Domain.Entities.Office.DoctorOffice", "DoctorOffice")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorOfficeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestorDePaciente.Core.Domain.Entities.Office.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GestorDePaciente.Core.Domain.Entities.Office.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("IdPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("DoctorOffice");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Office.Doctor", b =>
                {
                    b.HasOne("GestorDePaciente.Core.Domain.Entities.Office.DoctorOffice", "DoctorOffice")
                        .WithMany("Doctors")
                        .HasForeignKey("IdDoctorOffice")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorOffice");
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Office.Patient", b =>
                {
                    b.HasOne("GestorDePaciente.Core.Domain.Entities.Office.DoctorOffice", "DoctorOffice")
                        .WithMany("Patients")
                        .HasForeignKey("IdDoctorOffice")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorOffice");
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Lab.LabTests", b =>
                {
                    b.Navigation("ResultLabTests");
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Office.Appointment", b =>
                {
                    b.Navigation("LabTests");
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Office.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Office.DoctorOffice", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Doctors");

                    b.Navigation("LabTests");

                    b.Navigation("Patients");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Office.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("LabTests");

                    b.Navigation("ResultLabTests");
                });

            modelBuilder.Entity("GestorDePaciente.Core.Domain.Entities.Role.Role", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
